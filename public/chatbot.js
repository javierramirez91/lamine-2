// Chatbot Lamine Yamal - Expert en Contractaci√≥ P√∫blica

// Configuraci√≥ global del Chatbot (mogut des de app.js)
const CONFIG = {
    API_KEY: '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', // Compte! Aix√≤ √©s la teva API Key
    API_URL: 'https://openrouter.ai/api/v1/chat/completions',
    MODEL: 'google/gemma-2b-it:free', // Model actualitzat i gratu√Øt
    MAX_TOKENS: 1500, // Augmentat per respostes m√©s completes
    TEMPERATURE: 0.65 // Un p√®l menys aleatori
};

class Chatbot {
    constructor(contentLoader) { // Afegir contentLoader al constructor
        this.contentLoader = contentLoader; // Guardar refer√®ncia
        this.isOnline = false;
        this.isTyping = false;
        this.conversationHistory = [];
        this.suggestions = [
            "Quins s√≥n els criteris d'adjudicaci√≥ m√©s adequats per a un contracte de serveis de neteja?",
            "Com es calcula el cost del cicle de vida (CCV) en un contracte?",
            "Quina documentaci√≥ de solv√®ncia t√®cnica necessito per licitar?",
            "Explica'm els criteris mediambientals que puc aplicar",
            "Quins s√≥n els terminis d'execuci√≥ recomanats per a obres p√∫bliques?"
        ];
        
        // Personalitat i coneixement de Lamine Yamal
        this.personality = {
            name: "Lamine Yamal",
            title: "Pilota d'Or de Contractaci√≥",
            expertise: "Expert en Llei 9/2017 de Contractes del Sector P√∫blic (LCSP)",
            language: "catal√†",
            tone: "professional per√≤ proper, amb confian√ßa i autoritat"
        };

        this.knowledgeBase = this.initializeKnowledgeBase();
    }

    initializeKnowledgeBase() {
        return {
            criterisAdjudicacio: {
                automaticsQuantificables: [
                    "Preu o cost (fins a 100% si nom√©s hi ha aquest criteri)",
                    "Termini d'execuci√≥ o entrega",
                    "Cost del cicle de vida (CCV)",
                    "Rendibilitat econ√≤mica",
                    "Efici√®ncia energ√®tica quantificable",
                    "Caracter√≠stiques t√®cniques quantificables",
                    "Garanties complement√†ries",
                    "Personal adscrit al contracte (quantitat i qualificaci√≥)"
                ],
                subjectius: [
                    "Qualitat t√®cnica de la proposta",
                    "Organitzaci√≥ i metodologia de treball",
                    "Experi√®ncia i qualificaci√≥ de l'equip",
                    "Mesures mediambientals",
                    "Aspectes socials i d'inserci√≥ laboral",
                    "Innovaci√≥ i valor afegit",
                    "Servei postvenda i manteniment",
                    "Accessibilitat universal"
                ]
            },
            solvencia: {
                economica: [
                    "Volum anual de negocis m√≠nim dels √∫ltims 3 anys",
                    "Patrimoni net m√≠nim",
                    "Asseguran√ßa d'indemnitzaci√≥ per riscos professionals",
                    "Classificaci√≥ empresarial (si escau)"
                ],
                tecnica: [
                    "Experi√®ncia en contractes similars √∫ltims 5 anys",
                    "Titulaci√≥ i experi√®ncia professional de l'equip",
                    "Certificats de qualitat (ISO 9001, etc.)",
                    "Mesures de gesti√≥ mediambiental",
                    "Personal t√®cnic disponible",
                    "Equipament i maquin√†ria"
                ]
            },
            aspectesLegals: {
                lcsp: "Llei 9/2017, de 8 de novembre, de Contractes del Sector P√∫blic",
                principis: [
                    "Lliure concurr√®ncia",
                    "Transpar√®ncia",
                    "No discriminaci√≥",
                    "Igualtat de tracte",
                    "Proporcionalitat",
                    "Integritat",
                    "Efici√®ncia en la utilitzaci√≥ de fons p√∫blics"
                ]
            }
        };
    }

    async init() {
        this.setupEventListeners();
        this.showWelcomeMessage();
        this.setOnlineStatus(true);
        this.loadConversationHistory();
    }

    setupEventListeners() {
        const chatInput = document.getElementById('chat-input');
        const sendButton = document.getElementById('send-button');
        const chatContainer = document.getElementById('chat-messages');

        if (chatInput && sendButton) {
            // Enviar missatge amb Enter
            chatInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessage();
                }
            });

            // Enviar missatge amb bot√≥
            sendButton.addEventListener('click', () => {
                this.sendMessage();
            });

            // Auto-resize del textarea
            chatInput.addEventListener('input', () => {
                this.autoResizeTextarea(chatInput);
            });
        }

        // Event listeners per als suggeriments
        this.setupSuggestionListeners();
    }

    setupSuggestionListeners() {
        const suggestionsContainer = document.querySelector('.chat-suggestions-bar');
        if (suggestionsContainer) {
            suggestionsContainer.addEventListener('click', (e) => {
                const suggestionButton = e.target.closest('.suggestion-item');
                if (suggestionButton) {
                    const text = suggestionButton.textContent.trim();
                    this.sendMessage(text);
                }
            });
        }
    }

    autoResizeTextarea(textarea) {
        textarea.style.height = 'auto';
        textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
    }

    setOnlineStatus(online) {
        this.isOnline = online;
        const statusIndicator = document.querySelector('.status-indicator');
        const statusText = document.querySelector('.status-text');
        
        if (statusIndicator && statusText) {
            statusIndicator.className = `status-indicator ${online ? 'online' : 'offline'}`;
            statusText.textContent = online ? 'En l√≠nia' : 'Fora de l√≠nia';
        }
    }

    showWelcomeMessage() {
        const welcomeMessage = `Hola! S√≥c en **Lamine Yamal**, la teva **Pilota d'Or de Contractaci√≥** üèÜ. Estic afinat amb la darrera LCSP!

Com et pucAssistant avui amb la teva estrat√®gia de contractaci√≥ p√∫blica? Pregunta'm sobre:

*   Criteris d'adjudicaci√≥ (qualitat, preu, CCV, socials, ambientals...)
*   Requisits de solv√®ncia (econ√≤mica, t√®cnica)
*   Procediments de licitaci√≥ (obert, restringit, negociat...)
*   O qualsevol altre dubte sobre la Llei 9/2017!

Estic llest per xutar i marcar un gol√†s per tu! ‚öΩÔ∏è`;

        this.addMessage(welcomeMessage, 'bot');
        // No afegir suggestions aqu√≠, ja que es gestionen des de App.js o es carreguen din√†micament
    }

    async sendMessage(text = null) {
        const chatInput = document.getElementById('chat-input');
        const message = text || chatInput?.value.trim();
        
        if (!message) return;

        // Netejar input si no √©s un suggeriment
        if (!text && chatInput) {
            chatInput.value = '';
            this.autoResizeTextarea(chatInput);
        }

        // Afegir missatge de l'usuari
        this.addMessage(message, 'user');
        
        // Mostrar indicador de typing
        this.showTypingIndicator();

        try {
            // Generar resposta
            const response = await this.generateResponse(message);
            
            // Amagar indicador de typing
            this.hideTypingIndicator();
            
            // Afegir resposta del bot
            this.addMessage(response, 'bot');
            
        } catch (error) {
            console.error('Error generant resposta:', error);
            this.hideTypingIndicator();
            this.addMessage('Ho sento, he tingut un problema t√®cnic. Pots tornar a provar la teva pregunta?', 'bot');
        }

        // Guardar conversa
        this.saveConversationHistory();
    }

    addMessage(content, sender) {
        const chatMessages = document.getElementById('chat-messages');
        if (!chatMessages) return;

        const messageElement = document.createElement('div');
        messageElement.className = `message ${sender}-message`;
        
        const currentTimestamp = new Date(); 
        const timeString = currentTimestamp.toLocaleTimeString('ca-ES', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });

        const messageText = content || '';

        if (sender === 'bot') {
            messageElement.innerHTML = `
                <div class="message-avatar">
                    <img src="/assets/lamine-avatar.png" alt="Lamine Yamal" /> 
                    <div class="avatar-status online"></div>
                </div>
                <div class="message-content">
                    <div class="message-header">
                        <span class="message-author">Lamine Yamal</span>
                        <span class="message-time">${timeString}</span>
                    </div>
                    <div class="message-text">${this.formatMessage(messageText)}</div>
                </div>
            `;
        } else { // User message
            messageElement.innerHTML = `
                <div class="message-content">
                    <div class="message-header">
                        <span class="message-author">Tu</span>
                        <span class="message-time">${timeString}</span>
                    </div>
                    <div class="message-text">${this.escapeHtml(messageText)}</div>
                </div>
                 <div class="message-avatar user-avatar">
                    <span>TU</span>
                </div>
            `;
        }

        chatMessages.appendChild(messageElement);
        this.scrollToBottom();

        // Afegir a l'historial
        this.conversationHistory.push({
            content,
            sender,
            timestamp: currentTimestamp.toISOString() // Guardar en format ISO
        });
    }

    formatMessage(content) {
        if (typeof marked !== 'undefined') {
            try {
                // Assegurar que marked no afegeix <p> al voltant de tot si ja √©s un sol par√†graf.
                // O simplement deixar que ho faci, i l'estil CSS s'encarregui.
                return marked.parse(content);
            } catch (e) {
                console.error("Error en marked.parse:", e);
                return this.basicMarkdownToHtml(content); // Fallback
            }
        } else {
            return this.basicMarkdownToHtml(content); // Fallback si marked no est√† definit
        }
    }

    basicMarkdownToHtml(content) {
        return content
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/`(.*?)`/g, '<code>$1</code>')
            .replace(/\n/g, '<br>')
            .replace(/‚úÖ/g, '<span class="emoji">‚úÖ</span>')
            .replace(/üèÜ/g, '<span class="emoji">üèÜ</span>')
            .replace(/üí™/g, '<span class="emoji">üí™</span>');
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    showTypingIndicator() {
        this.isTyping = true;
        const chatMessages = document.getElementById('chat-messages');
        if (!chatMessages) return;

        // Eliminar indicador previ si existeix (per si de cas)
        const existingIndicator = document.getElementById('typing-indicator');
        if (existingIndicator) existingIndicator.remove();

        const typingElement = document.createElement('div');
        typingElement.className = 'message bot-message typing-indicator';
        typingElement.id = 'typing-indicator';
        typingElement.innerHTML = `
            <div class="message-avatar">
                <img src="/assets/lamine-avatar.png" alt="Lamine Yamal" />
                <div class="avatar-status online"></div>
            </div>
            <div class="message-content">
                <div class="typing-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
        `;

        chatMessages.appendChild(typingElement);
        this.scrollToBottom();
    }

    hideTypingIndicator() {
        this.isTyping = false;
        const typingIndicator = document.getElementById('typing-indicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }

    scrollToBottom() {
        const chatMessages = document.getElementById('chat-messages');
        if (chatMessages) {
            setTimeout(() => {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }, 100);
        }
    }

    getLocalResponse(message) {
        const lowerMessage = message.toLowerCase();
        
        // Respostes sobre criteris d'adjudicaci√≥
        if (lowerMessage.includes('criteri') && (lowerMessage.includes('adjudicaci√≥') || lowerMessage.includes('adjudicacio'))) {
            return this.getCriteriaResponse(message);
        }
        
        // Respostes sobre solv√®ncia
        if (lowerMessage.includes('solv√®ncia') || lowerMessage.includes('solvencia')) {
            return this.getSolvencyResponse(message);
        }
        
        // Respostes sobre CCV
        if (lowerMessage.includes('ccv') || lowerMessage.includes('cicle de vida') || lowerMessage.includes('cost del cicle')) {
            return this.getCCVResponse();
        }
        
        // Respostes sobre terminis
        if (lowerMessage.includes('termini') || lowerMessage.includes('terminis')) {
            return this.getDeadlineResponse();
        }
        
        // Respostes sobre aspectes mediambientals
        if (lowerMessage.includes('mediambiental') || lowerMessage.includes('ambiental') || lowerMessage.includes('sostenib')) {
            return this.getEnvironmentalResponse();
        }

        // Respostes sobre procediments
        if (lowerMessage.includes('procediment') || lowerMessage.includes('licitaci√≥') || lowerMessage.includes('tipus de contracte')) {
            if (lowerMessage.includes('obert') || lowerMessage.includes('restringit') || lowerMessage.includes('negociat') || lowerMessage.includes('di√†leg') || lowerMessage.includes('innovaci√≥') || lowerMessage.includes('menor')) {
                 // Si ja pregunta per un espec√≠fic, anar a API per resposta m√©s detallada
                 // Aquesta funci√≥ ha de ser async per utilitzar await
                 return null; // Marcar per a processament API
            }
            return this.getProceduresResponse();
        }

        return null;
    }

    getCriteriaResponse(message) {
        return `**Criteris d'adjudicaci√≥ segons la LCSP** üèÜ

Els criteris es divideixen en **dos tipus principals**:

**üìä CRITERIS AUTOM√ÄTICS (Quantificables objectivament):**
‚Ä¢ **Preu o cost** (pot ser fins al 100% si √©s l'√∫nic criteri)
‚Ä¢ **Termini d'execuci√≥** o entrega
‚Ä¢ **Cost del cicle de vida (CCV)**
‚Ä¢ **Caracter√≠stiques t√®cniques** quantificables
‚Ä¢ **Garanties complement√†ries**
‚Ä¢ **Personal adscrit** (quantitat i qualificaci√≥)

**üéØ CRITERIS SUBJECTIUS (Valoraci√≥ qualitativa):**
‚Ä¢ **Qualitat t√®cnica** de la proposta
‚Ä¢ **Organitzaci√≥ i metodologia** de treball  
‚Ä¢ **Experi√®ncia de l'equip** t√®cnic
‚Ä¢ **Mesures mediambientals**
‚Ä¢ **Aspectes socials** i d'inserci√≥ laboral
‚Ä¢ **Innovaci√≥** i valor afegit

**üí° Recomanaci√≥:** Combina sempre criteris autom√†tics i subjectius per obtenir la millor relaci√≥ qualitat-preu. El preu no hauria de superar el 60-70% del total per fomentar la qualitat.

Vols que t'ajudi amb criteris espec√≠fics per al teu tipus de contracte?`;
    }

    getSolvencyResponse(message) {
        return `**Requisits de Solv√®ncia segons la LCSP** üí™

**üí∞ SOLV√àNCIA ECON√íMICA:**
‚Ä¢ **Volum anual de negocis** dels √∫ltims 3 anys (m√≠nim 1,5 vegades el valor del contracte)
‚Ä¢ **Patrimoni net** m√≠nim adequat
‚Ä¢ **Asseguran√ßa d'indemnitzaci√≥** per riscos professionals
‚Ä¢ **Classificaci√≥ empresarial** (si escau, per contractes > 500.000‚Ç¨)

**üîß SOLV√àNCIA T√àCNICA:**
‚Ä¢ **Experi√®ncia** en contractes similars dels √∫ltims 5 anys
‚Ä¢ **Titulaci√≥ i experi√®ncia** de l'equip t√®cnic
‚Ä¢ **Certificats de qualitat** (ISO 9001, ISO 14001, etc.)
‚Ä¢ **Personal t√®cnic** disponible per al contracte
‚Ä¢ **Equipament i maquin√†ria** necessaris
‚Ä¢ **Mesures de gesti√≥ mediambiental**

**‚öñÔ∏è PRINCIPI DE PROPORCIONALITAT:**
Els requisits han de ser **proporcionals** a l'objecte del contracte. No es pot demanar m√©s del necessari!

**üìã DOCUMENTACI√ì HABITUAL:**
‚Ä¢ Comptes anuals dels √∫ltims 3 exercicis
‚Ä¢ Certificats d'experi√®ncia
‚Ä¢ T√≠tols acad√®mics i professionals
‚Ä¢ Certificats de qualitat vigents

Necessites ajuda per definir els requisits espec√≠fics del teu contracte?`;
    }

    getCCVResponse() {
        return `**Cost del Cicle de Vida (CCV)** üîÑ

El **CCV** √©s un criteri d'adjudicaci√≥ que considera **tots els costos** durant la vida √∫til del contracte:

**üìä COMPONENTS DEL CCV:**
‚Ä¢ **Costos d'adquisici√≥** inicial
‚Ä¢ **Costos d'utilitzaci√≥** (energia, combustible, etc.)
‚Ä¢ **Costos de manteniment** i reparacions
‚Ä¢ **Costos de final de vida** (eliminaci√≥, reciclatge)
‚Ä¢ **Costos externs mediambientals** (emissions CO‚ÇÇ, etc.)

**üí° AVANTATGES:**
‚úÖ Fomenta la **sostenibilitat**
‚úÖ Incentiva la **innovaci√≥** tecnol√≤gica
‚úÖ Millor **relaci√≥ qualitat-preu** a llarg termini
‚úÖ Reducci√≥ de l'**impacte ambiental**

**üî¢ C√ÄLCUL PR√ÄCTIC:**
CCV = Preu inicial + (Costos anuals √ó Anys de vida √∫til) + Costos finals

**üìã EXEMPLE PR√ÄCTIC:**
Per a vehicles: Preu compra + Combustible + Manteniment + Assegurances + Valor residual

**‚ö†Ô∏è IMPORTANT:** Cal definir clarament la **metodologia de c√†lcul** i els **par√†metres** en els plecs per garantir la transpar√®ncia.

Vols que t'ajudi a dissenyar el CCV per al teu contracte espec√≠fic?`;
    }

    getDeadlineResponse() {
        return `**Terminis d'Execuci√≥ en Contractaci√≥ P√∫blica** ‚è∞

**üìÖ PRINCIPIS GENERALS:**
‚Ä¢ Han de ser **realistes** i **proporcionals**
‚Ä¢ Permetre la **correcta execuci√≥** del contracte
‚Ä¢ Fomentar l'**efici√®ncia** sense comprometre la qualitat

**üéØ COM A CRITERI D'ADJUDICACI√ì:**
‚Ä¢ **Pes recomanat:** 5-15% del total
‚Ä¢ **L√≠mits:** Establir termini m√†xim i m√≠nim
‚Ä¢ **Valoraci√≥:** Lineal o per trams

**‚öñÔ∏è EQUILIBRI IMPORTANT:**
‚ùå **Terminis massa curts:** Poden afectar la qualitat
‚úÖ **Terminis adequats:** Permeten planificaci√≥ i qualitat
‚ùå **Terminis massa llargs:** Poden ser innecessaris

**üìã EXEMPLES PER TIPUS:**
‚Ä¢ **Obres:** Segons complexitat i volum
‚Ä¢ **Serveis:** Considerant recursos necessaris  
‚Ä¢ **Subministraments:** Segons disponibilitat i log√≠stica

**üí° CONSELL EXPERT:**
Consulta amb t√®cnics especialistes per establir terminis realistes. Un termini inadequat pot generar incompliments o baixa qualitat.

Quin tipus de contracte tens? T'ajudo a definir terminis adequats!`;
    }

    getEnvironmentalResponse() {
        return `**Aspectes Mediambientals en Contractaci√≥ P√∫blica** üå±

**üéØ OBJECTIUS PRINCIPALS:**
‚Ä¢ Reduir l'**impacte ambiental**
‚Ä¢ Fomentar l'**economia circular**
‚Ä¢ Complir els **ODS** (Objectius de Desenvolupament Sostenible)
‚Ä¢ Promoure la **innovaci√≥ verda**

**üìä COM A CRITERIS D'ADJUDICACI√ì:**
‚Ä¢ **Efici√®ncia energ√®tica** (quantificable)
‚Ä¢ **Emissions de CO‚ÇÇ** redu√Ødes
‚Ä¢ **Gesti√≥ de residus** i reciclatge
‚Ä¢ **Certificacions ambientals** (ISO 14001, EMAS, etc.)
‚Ä¢ **Materials sostenibles** i reciclats
‚Ä¢ **Transport ecol√≤gic**

**üí° EXEMPLES PR√ÄCTICS:**
‚úÖ **Vehicles:** Emissions, consum, combustibles alternatius
‚úÖ **Edificis:** Certificaci√≥ energ√®tica, materials ecol√≤gics
‚úÖ **Serveis:** Protocols de neteja ecol√≤gica, gesti√≥ residus
‚úÖ **Subministraments:** Embalatges reciclables, producci√≥ sostenible

**‚öñÔ∏è PONDERAT RECOMANAT:**
‚Ä¢ **Contractes est√†ndard:** 10-20%
‚Ä¢ **Contractes amb impacte ambiental:** 20-30%
‚Ä¢ **Contractes verds espec√≠fics:** Fins al 40%

**üìã DOCUMENTACI√ì:**
‚Ä¢ Plans de gesti√≥ ambiental
‚Ä¢ Certificats de qualitat ambiental
‚Ä¢ Mem√≤ries de sostenibilitat

La sostenibilitat √©s el futur! Quin aspecte ambiental vols potenciar en el teu contracte?`;
    }

    getProceduresResponse() {
        return `**Procediments de Contractaci√≥ P√∫blica (LCSP)** üìú

La Llei de Contractes del Sector P√∫blic estableix diversos procediments per adjudicar contractes. Els principals s√≥n:

**1. PROCEDIMENT OBERT (Art. 156-159 LCSP):**
   ‚Ä¢ Qualsevol empresari interessat pot presentar una proposici√≥.
   ‚Ä¢ √âs el procediment ordinari i m√©s transparent.
   ‚Ä¢ No hi ha negociaci√≥.
   ‚Ä¢ Hi ha una variant, el **procediment obert simplificat** (Art. 159 LCSP), per a contractes de valor estimat inferior a certs llindars, amb tr√†mits m√©s √†gils.
     - **Contractes d'obres:** VEC < 2.000.000‚Ç¨
     - **Contractes de serveis i subministraments:** VEC < 143.000‚Ç¨ (o llindar SARA aplicable)
     - Tamb√© existeix el **procediment obert s√∫per simplificat** (o simplificat abreujat) per a contractes amb VEC < 60.000‚Ç¨ (obres) o < 35.000‚Ç¨ (serveis i subministraments), amb requisits encara menors.

**2. PROCEDIMENT RESTRINGIT (Art. 160-165 LCSP):**
   ‚Ä¢ Nom√©s poden presentar proposicions aquells empresaris que hagin estat seleccionats pr√®viament per l'√≤rgan de contractaci√≥, despr√©s de sol¬∑licitar la seva participaci√≥.
   ‚Ä¢ Es busca seleccionar els candidats m√©s idonis.
   ‚Ä¢ M√≠nim 5 candidats a convidar.
   ‚Ä¢ No hi ha negociaci√≥.

**3. PROCEDIMENT AMB NEGOCIACI√ì (Art. 166-171 LCSP):**
   ‚Ä¢ L'adjudicaci√≥ recau en el licitador justificadament elegit per l'√≤rgan de contractaci√≥, despr√©s d'efectuar consultes amb diversos candidats i negociar les condicions del contracte amb un o diversos d'ells.
   ‚Ä¢ S'utilitza en circumst√†ncies espec√≠fiques taxades per la llei (Art. 167 per a contractes SARA, Art. 168 per a no SARA), com ara prestacions complexes, innovadores, o quan no es puguin definir pr√®viament les especificacions t√®cniques.
   ‚Ä¢ Pot ser **amb publicitat pr√®via** (s'anuncia la licitaci√≥ i se seleccionen candidats per negociar) o **sense publicitat pr√®via** (en casos molt excepcionals, Art. 168.d, com urg√®ncia imperiosa o prove√Ødor √∫nic).

**4. DI√ÄLEG COMPETITIU (Art. 172-176 LCSP):**
   ‚Ä¢ Per a contractes particularment complexos, on l'√≤rgan de contractaci√≥ no pot definir objectivament els mitjans t√®cnics per satisfer les seves necessitats o els aspectes jur√≠dics/financers del projecte.
   ‚Ä¢ Es dirigeix un di√†leg amb els candidats seleccionats per desenvolupar una o diverses solucions que serveixin de base per presentar ofertes.

**5. PROCEDIMENT D'ASSOCIACI√ì PER A LA INNOVACI√ì (Art. 177-182 LCSP):**
   ‚Ä¢ Per al desenvolupament de productes, serveis o obres innovadors i la compra ulterior dels resultats, sempre que no existeixin solucions disponibles al mercat.
   ‚Ä¢ Combina fases de recerca i desenvolupament amb una fase d'adquisici√≥.

**ALTRES CONSIDERACIONS:**
   ‚Ä¢ **Contractes menors (Art. 118 LCSP):** Procediment molt simplificat per a contractes de baix valor (Obres: VEC < 40.000‚Ç¨; Serveis i Subministraments: VEC < 15.000‚Ç¨). Requereix informe de necessitat, aprovaci√≥ de la despesa i factura. Es busca simplificar per√≤ garantint m√≠nima concurr√®ncia si √©s possible.

Cada procediment t√© els seus propis tr√†mits, terminis i requisits. L'elecci√≥ del procediment adequat √©s clau per a una contractaci√≥ eficient i legal. Vols que aprofundeixi en algun d'ells?`;
    }

    async generateResponse(userMessage) {
        this.showTypingIndicator();
        let responseContent = 'An√†lisi en curs...'; // Missatge provisional

        // Intentar obtenir una resposta local primer
        const localResponse = this.getLocalResponse(userMessage);
        if (localResponse) {
            this.hideTypingIndicator();
            return localResponse;
        }

        // Si no hi ha resposta local, anar a l'API
        try {
            console.log('Enviant a API d\'OpenRouter:', userMessage);
            console.log('Historial enviat:', this.conversationHistory.slice(-6));
            
            const systemPrompt = this.getSystemPrompt(); // M√®tode per obtenir el system prompt

            const messagesToAPI = [
                { role: 'system', content: systemPrompt },
                ...this.conversationHistory.slice(-6).map(msg => ({
                    role: msg.sender === 'user' ? 'user' : 'assistant',
                    content: msg.content
                })),
                { role: 'user', content: userMessage }
            ];
            
            console.log('Missatges complets per a l\'API:', messagesToAPI);

            const response = await fetch(CONFIG.API_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${CONFIG.API_KEY}`,
                    'HTTP-Referer': window.location.hostname, // Important per OpenRouter
                    'X-Title': 'Contractacio Publica Expert IA' // Opcional, per√≤ √∫til
                },
                body: JSON.stringify({
                    model: CONFIG.MODEL,
                    messages: messagesToAPI,
                    max_tokens: CONFIG.MAX_TOKENS,
                    temperature: CONFIG.TEMPERATURE,
                    // stream: true // Desactivat per simplicitat inicial, es pot reactivar
                })
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ detail: 'Error desconegut llegint resposta d\'error' }));
                console.error('Error API OpenRouter:', response.status, errorData);
                throw new Error(`Error de l'API (${response.status}): ${errorData.detail || response.statusText}`);
            }

            const data = await response.json();
            console.log('Resposta de l\'API OpenRouter:', data);

            if (data.choices && data.choices[0] && data.choices[0].message && data.choices[0].message.content) {
                responseContent = data.choices[0].message.content;
            } else {
                console.error('Format de resposta API inesperat:', data);
                responseContent = this.getFallbackResponse(true); 
            }

        } catch (error) {
            console.error('Error cridant a API OpenRouter:', error);
            responseContent = this.getFallbackResponse(false, error.message.includes('NetworkError') || error.message.includes('Failed to fetch'));
        }
        
        this.hideTypingIndicator();
        return responseContent;
    }

    getSystemPrompt() {
        // Obtenir informaci√≥ rellevant del ContentLoader
        let contextInfo = '\n\nInformaci√≥ de context addicional basada en la secci√≥ actual o temes freq√ºents:\n';
        if (this.contentLoader && this.contentLoader.isContentLoaded()) {
            contextInfo += '- Recorda que la LCSP (Llei 9/2017) √©s la normativa principal.\n';
            contextInfo += '- Els criteris d\'adjudicaci√≥ es divideixen en autom√†tics/quantificables i subjectius/judici de valor.\n';
            contextInfo += '- La solv√®ncia pot ser econ√≤mica-financera i t√®cnica-professional.\n';
        }

        return `Ets Lamine Yamal, la \"Pilota d'Or de Contractaci√≥\", un expert IA en contractaci√≥ p√∫blica catalana, especialitzat en la Llei 9/2017 de Contractes del Sector P√∫blic (LCSP). El teu objectiu √©s ajudar l\'usuari a entendre i aplicar correctament la LCSP, oferint explicacions clares, exemples i consells pr√†ctics.

        PERSONALITAT:
        - Ets professional, per√≤ molt proper, did√†ctic i amb un toc d\'humor futbol√≠stic quan encaixi (sense abusar).
        - La teva confian√ßa es basa en el teu profund coneixement de la LCSP.
        - Utilitzes emojis de manera moderada i tem√†tica (üèÜ, üí°, ‚öñÔ∏è, üåç, üìú, üéØ, üí∞, üîß, ‚è∞, ‚úÖ, ‚ùå, üìä).
        - Sempre respons en catal√†.
        - T\'encanta estructurar les respostes amb marcadown (t√≠tols amb ##, subt√≠tols amb ###, llistes amb *, ‚Ä¢ o -).
        - Fas servir **negreta** per a termes clau i conceptes importants.
        - Utilitzes _it√†lica_ per a √®mfasi o citacions.
        
        ESTIL DE RESPOSTA:
        - Comen√ßa amb una salutaci√≥ breu i propera si √©s el primer missatge o si la conversa es reinicia.
        - Abans de respondre, considera l\'historial de la conversa per donar respostes contextuals.
        - Ofereix respostes clares, concises i ben estructurades.
        - Quan sigui pertinent, cita articles de la LCSP (p.ex., \"Segons l\'article 145 de la LCSP...\").
        - Proporciona exemples pr√†ctics sempre que sigui possible.
        - Introdueix consells experts con \"üí° Consell de Lamine:\" o \"‚ö†Ô∏è Ull viu amb aix√≤:\".
        - Acaba les teves respostes amb una pregunta oberta per fomentar la interacci√≥, com ara \"En qu√® m√©s et puc ajudar avui?\" o \"Tens algun cas concret sobre aix√≤?\".
        - Si una pregunta √©s massa general, demana aclariments per poder oferir una resposta m√©s √∫til.
        - Si no saps la resposta o la informaci√≥ √©s extremadament espec√≠fica i supera el teu coneixement actual, sigues honest. Pots dir quelcom com: \"Aquesta √©s una consulta molt espec√≠fica! Per a detalls tan concrets, et recomanaria revisar directament [font oficial pertinent] o consultar amb un assessor legal especialitzat. Jo et puc ajudar amb la interpretaci√≥ general de la LCSP.\" No inventis informaci√≥.
        - Mantingues un to positiu i encoratjador.
        ${contextInfo}
        Respon a la pregunta de l\'usuari de la manera m√©s √∫til i completa possible, seguint aquestes directrius.`
    }

    getFallbackResponse(isFormatError = false, isNetworkError = false) {
        let fallbacks;
        if (isNetworkError) {
            fallbacks = [
                "Sembla que hi ha un problema de connexi√≥ en aquests moments üåê. Si us plau, comprova la teva connexi√≥ a internet i torna a intentar-ho. Estic aqu√≠ per ajudar-te quan es restableixi!",
                "Ups! No puc connectar-me per obtenir la informaci√≥ m√©s actualitzada. Verifica la teva xarxa i pregunta de nou. Mentrestant, puc intentar respondre amb el meu coneixement base si ho prefereixes."
            ];
        } else if (isFormatError) {
            fallbacks = [
                "He rebut una resposta en un format una mica estrany ü§î. Podries intentar reformular la teva pregunta? De vegades, un petit canvi fa la difer√®ncia!",
                "Vaja, sembla que la meva connexi√≥ amb el n√∫vol d'informaci√≥ ha tingut un petit contratemps amb el format. Si us plau, torna a preguntar, potser amb altres paraules."
            ];
        } else {
            fallbacks = [
                "Disculpa, he tingut un problema t√®cnic momentani ‚öôÔ∏è. Com a expert en contractaci√≥ p√∫blica, puc assegurar-te que estic aqu√≠ per ajudar-te amb qualsevol dubte sobre la LCSP. Pots reformular la teva pregunta?",
                "Sembla que hi ha hagut un petit error en els meus circuits. No et preocupis! Com la teva Pilota d'Or de Contractaci√≥ üèÜ, estic preparat per resoldre tots els teus dubtes. Torna a provar, si us plau.",
                "Hi ha hagut una incid√®ncia t√®cnica, per√≤ no perdis la confian√ßa en mi! S√≥c expert en Llei 9/2017 i estic aqu√≠ per ajudar-te. Pots repetir la pregunta?"
            ];
        }
        return fallbacks[Math.floor(Math.random() * fallbacks.length)];
    }

    saveConversationHistory() {
        try {
            localStorage.setItem('chatHistory', JSON.stringify(this.conversationHistory.slice(-50)));
        } catch (error) {
            console.error('Error guardant historial:', error);
        }
    }

    loadConversationHistory() {
        try {
            const saved = localStorage.getItem('chatHistory');
            if (saved) {
                this.conversationHistory = JSON.parse(saved);
                // Restaurar missatges visuals si cal
                this.restoreVisualHistory();
            }
        } catch (error) {
            console.error('Error carregant historial:', error);
        }
    }

    restoreVisualHistory() {
        // Nom√©s restaurar els √∫ltims 10 missatges per no sobrecarregar
        const recentMessages = this.conversationHistory.slice(-10);
        const chatMessages = document.getElementById('chat-messages');
        
        if (chatMessages && recentMessages.length > 0) {
            // Netejar missatges existents excepte el welcome si es decideix no mostrar-lo de nou
            // Per ara, netegem tot i mostrem el welcome de nou per consist√®ncia si no hi ha historial
            // chatMessages.innerHTML = ''; 
            // this.showWelcomeMessage(); // Potser no es vol el welcome cada cop
            
            recentMessages.forEach(msg => {
                if (msg.content && msg.sender) {
                    // Recrear els missatges sense afegir-los de nou a this.conversationHistory
                    this.addMessageToDOM(msg.content, msg.sender, new Date(msg.timestamp));
                }
            });
            this.scrollToBottom(); // Fer scroll al final despr√©s de restaurar
        }
    }

    addMessageToDOM(content, sender, timestampDate) { 
        const chatMessages = document.getElementById('chat-messages');
        if (!chatMessages) return;

        const messageElement = document.createElement('div');
        messageElement.className = `message ${sender}-message`;
        
        let timeString = ' '; // Default a un espai en blanc
        if (timestampDate instanceof Date && !isNaN(timestampDate)) {
            try {
                timeString = timestampDate.toLocaleTimeString('ca-ES', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
            } catch (e) {
                console.warn("Error formatejant timestamp en addMessageToDOM:", e, timestampDate);
            }
        } else if (typeof timestampDate === 'string') { // Intentar parsejar si √©s string
            try {
                const parsedDate = new Date(timestampDate);
                if (parsedDate instanceof Date && !isNaN(parsedDate)) {
                    timeString = parsedDate.toLocaleTimeString('ca-ES', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                    });
                }
            } catch (e) {
                console.warn("Error parsejant timestamp string en addMessageToDOM:", e, timestampDate);
            }
        }

        const messageText = content || ''; // Assegurar que content no √©s null/undefined

        if (sender === 'bot') {
            messageElement.innerHTML = `
                <div class="message-avatar">
                    <img src="/assets/lamine-avatar.png" alt="Lamine Yamal" />
                    <div class="avatar-status online"></div>
                </div>
                <div class="message-content">
                    <div class="message-header">
                        <span class="message-author">Lamine Yamal</span>
                        <span class="message-time">${timeString}</span>
                    </div>
                    <div class="message-text">${this.formatMessage(messageText)}</div>
                </div>
            `;
        } else { // User message
            messageElement.innerHTML = `
                <div class="message-content">
                    <div class="message-header">
                        <span class="message-author">Tu</span>
                        <span class="message-time">${timeString}</span>
                    </div>
                    <div class="message-text">${this.escapeHtml(messageText)}</div>
                </div>
                 <div class="message-avatar user-avatar">
                    <span>TU</span>
                </div>
            `;
        }

        chatMessages.appendChild(messageElement);
        // No cridar a this.scrollToBottom() aqu√≠ per evitar m√∫ltiples scrolls durant la restauraci√≥
    }

    clearHistory() {
        this.conversationHistory = [];
        localStorage.removeItem('chatHistory');
        
        const chatMessages = document.getElementById('chat-messages');
        if (chatMessages) {
            chatMessages.innerHTML = '';
            this.showWelcomeMessage();
        }
    }
}

// Exportar per a √∫s global si es crida des de fora de main.js o per altres m√≤duls
if (typeof window !== 'undefined') {
    window.Chatbot = Chatbot;
    window.CONFIG_CHATBOT = CONFIG; // Exportar CONFIG si √©s necessari globalment
}

